source("mlp-multihidden-sgd-momentum-dropout.r)
source("mlp-multihidden-sgd-momentum-dropout.r")
iris.test
iris.test()
dataset = as.matrix(cbind(iris[,1:4], class.ind(iris[,5])))
dataset
dataset[1,]
nrow(dataset)
sample(nrow(dataset))
sample(nrow(dataset),2)
sample(nrow(dataset),0.7*nrow(dataset))
train.ids = sample(nrow(dataset),0.7*nrow(dataset))
trainset = dataset[train.ids,]
testset = dataset[-train.ids,]
testset[1:3,]
trainset[1:3,]
x = iris.train.test()
source("mlp-multihidden-sgd-momentum-dropout.r")
x = iris.train.test()
norm(trainset)
norm(trainset,2)
norm(trainset,type=2)
norm(trainset,type="2")
norm(trainset,type="1")
x = iris.train.test()
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test(c(10,5), momentum.alpha=0.9)
x = iris.train.test(c(10,5,3), momentum.alpha=0.9)
dataset = as.matrix(cbind(iris[,1:4], class.ind(iris[,5])))
for (i in 1:4) {
dataset[,i] = (dataset[,i] - mean(dataset[,i])) / sd(dataset[,i])
}
train.ids = sample(nrow(dataset),0.7*nrow(dataset)
trainset = dataset[train.ids,]
testset = dataset[-train.ids,]
model = mlp.architecture(layers.sizes = layers.sizes, f.net=sigmoid, df.dnet=diff.sigmoid)
x = iris.train.test()
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test()
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test()
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test()
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test()
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test()
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test()
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test()
x = iris.train.test(layers.sizes=c(4, 10, 5, 3), batch.size=75, eta=1, momentum.alpha=0.99, threshold=1e-7)
x = iris.train.test(layers.sizes=c(4, 10, 5, 3), batch.size=75, eta=1, momentum.alpha=0.99, lambda=0.0001, threshold=1e-7)
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test(layers.sizes=c(4, 10, 5, 3), batch.size=75, eta=1, momentum.alpha=0.99, lambda=0.0001, threshold=1e-7)
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test(layers.sizes=c(4, 10, 5, 3), batch.size=75, eta=1, momentum.alpha=0.99, lambda=0.0001, threshold=1e-7)
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test(layers.sizes=c(4, 10, 5, 3), batch.size=75, eta=1, momentum.alpha=0.99, lambda=0.0001, threshold=1e-7)
x = iris.train.test(layers.sizes=c(4, 10, 5, 3), batch.size=75, eta=1, momentum.alpha=0.99, lambda=0.004, threshold=1e-7)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=0.1, momentum.alpha=0.9, lambda=0.004, threshold=1e-7)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=1, momentum.alpha=0, lambda=0.004, threshold=1e-7)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=1, momentum.alpha=0, lambda=0, threshold=1e-7)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=1, momentum.alpha=0, lambda=0.004, threshold=1e-7)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=1, momentum.alpha=0, lambda=0.004, threshold=1e-7, mult.factor=0.7)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=1, momentum.alpha=0, lambda=0.004, threshold=1e-7, mult.factor=0.2)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=1, momentum.alpha=0, lambda=0.004, threshold=1e-7, mult.factor=1)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=1, momentum.alpha=0, lambda=0.004, threshold=1e-7, mult.factor=0.95)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=0.1, momentum.alpha=0.9, lambda=0.004, threshold=1e-7, mult.factor=0.95)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=0.1, momentum.alpha=0.9, lambda=0.004, threshold=1e-7, mult.factor=0.9999)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=0.1, momentum.alpha=0.9, lambda=0.004, threshold=1e-7, mult.factor=1)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=0.1, momentum.alpha=0.9, lambda=0.4, threshold=1e-3, mult.factor=1)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=0.1, momentum.alpha=0.9, lambda=0, threshold=1e-3, mult.factor=1)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=0.1, momentum.alpha=0.9, lambda=0.0001, threshold=1e-3, mult.factor=1)
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=0.1, momentum.alpha=0.9, lambda=0.002, threshold=1e-3, mult.factor=1)
source("mlp-multihidden-sgd-momentum-dropout-weightdecay.r")
x = iris.train.test(layers.sizes=c(4, 10, 3), batch.size=75, eta=0.1, momentum.alpha=0.9, lambda=0, threshold=1e-3, mult.factor=0.99)
